http://www.gamedev.net/page/resources/_/technical/game-programming/general-collision-detection-for-games-using-ell-r1026

http://www.peroxide.dk/download/tutorials/tut10/pxdtut10.html

http://i.cs.hku.hk/~wenping/Moving_ellipsoids/TVCG-2007-12-0187.pdf


----


http://www.gamasutra.com/view/feature/131424/pool_hall_lessons_fast_accurate_.php?print=1


---
shader 
http://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/loading.php

--

bump mapping
adapted from 
http://www.swiftless.com/tutorials/glsl/8_bump_mapping.html
http://www.ozone3d.net/tutorials/bump_mapping_p4.php
http://fabiensanglard.net/bumpMapping/index.php
mostly the fabien one

--

generate a bunch of points/normals for one ellipsoid and for each one check if it is "inside" the other

collision of dynamic objects has force based on momentum (speed * mass) and kinetic energy response

The response is an impulse at the point of colliison, I think the angle is perpindicular to a function of the two previous angles
If the impulse is not toward the center of the shape, a component of it will create angular velocity and the other component will cause linear velocity.


want: object -> impulse (point, maginitude, direction)
object -> accelerate (direction)
object velocity, mass, acceleration (vector) angular velocity (vector?)

Primitives:
ellipsoid, sphere, cube, cuboid, cylinder

convex mesh?


Dice / alphabet blocks on the table to interact with

determine for each object the point of collision and normal / magnitude of velocity

for each colliding object, determine a collision vector and sum the vectors to get the net response

perform static collisions + response first, push out to prevent overlapping

for each pair of dynamic objects, only consider pairs that have a velocity difference in the direction of the position difference

a given point has a velocity as a function of both the angular velocity and linear velocity.




ellipsoid radius as an [x,y,z] vector instead of a scale (maybe remove scaling as a feature)



currently the board + pieces are rotated instead of the camera, and the camera is axis aligned at the origin.

If gravity is along y and board is axis aligned, camera needs to be moved.

Pieces should have distinct position + orientation. For rendering and ray casting to work combined matrices can be generated with a fixed order of translation/rotation/whatever

angular velocity should always be in global coordinates, I think. (speed as a vector, angV as a vector or a matrix)

position useful for collisions, selection, board state logic ...
is_piece
and piece_colour useful (extend node to be PieceNode ?)


IF I PREVENT ROTATION:
collisions become a lot easier to detect and handle, axis aligned ellipses of equal scale become sphere-sphere collision
and sphere-plane is also still easy



PARTITION SPACE TO REDUCE COLLISION DETECTION FROM N^2 TO SOMETHING REASONABLE



for each object, keep a list of static objects it is currently touching and the corresponding normals. apply friction if in contact and prevent acceleration towards a static normal.

for each dynamic collision, compute the sum of the forces away from the normals?
