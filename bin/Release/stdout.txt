attribute vec2 v_coord;
uniform sampler2D fbo_texture;
varying vec2 f_texcoord;
 
void main(void) {
  gl_Position = vec4(v_coord, 0.0, 1.0);
  f_texcoord = (v_coord + 1.0) / 2.0;
}

//	gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Vertex;
//	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
//	gl_Position = ftransform();
//	gl_FrontColor = gl_FrontMaterial.diffuse;;
uniform sampler2D fbo_texture;
varying vec2 f_texcoord;
 
const static vec2 offset[8] = {
    vec2(-1.0, -1.0),
    vec2(1.0, 1.0),
    vec2(-1.0, 1.0),
    vec2(1.0, -1.0),
    vec2(-1.0, 0.0),
    vec2(1.0, 0.0),
    vec2(0.0, -1.0),
    vec2(0.0, 1.0),
};

void main(void) {
    vec2 pixel = vec2(1.0/1200.0, 1.0/900.0);
    vec4 col = texture2D(fbo_texture, f_texcoord);
    
    // compare adjacent pixels
    float diff = abs(texture2D(fbo_texture, f_texcoord + offset[0] * pixel).r - texture2D(fbo_texture, f_texcoord + offset[1] * pixel).r) + 
                     abs(texture2D(fbo_texture, f_texcoord + offset[2] * pixel).r - texture2D(fbo_texture, f_texcoord + offset[3] * pixel).r) + 
                     abs(texture2D(fbo_texture, f_texcoord + offset[4] * pixel).r - texture2D(fbo_texture, f_texcoord + offset[5] * pixel).r) + 
                     abs(texture2D(fbo_texture, f_texcoord + offset[6] * pixel).r - texture2D(fbo_texture, f_texcoord + offset[7] * pixel).r);
    if (diff > 2.0) {
        diff = 0.0;
    }
    diff = clamp((diff) , 0.0, 1.0) ;
    col.gb = min(col.gb, 1 - diff);
    col = clamp(col, 0.0, 1.0); 
    gl_FragColor = col;
}

//    vec4 col = gl_Color;

attribute vec3 tangent;
attribute vec3 bitangent; 
varying vec3 lightVec;
varying vec3 halfVec;
varying vec3 eyeVec;

void main(void) {
	gl_TexCoord[0] =  gl_MultiTexCoord0;
	
	// Building the matrix Eye Space -> Tangent Space
	vec3 n = normalize (gl_NormalMatrix * gl_Normal);
	vec3 t = normalize (gl_NormalMatrix * tangent);
	vec3 b = normalize (gl_NormalMatrix * bitangent);
	//vec3 b = cross (n, t);
	
	vec3 vertexPosition = vec3(gl_ModelViewMatrix *  gl_Vertex);
    //vec3 lightPosition = vec3(gl_ModelViewMatrix *  gl_LightSource[0].position);
    vec3 lightPosition = gl_LightSource[0].position.xyz;
	vec3 lightDir = normalize(lightPosition - vertexPosition);
		
	// transform light and half angle vectors by tangent basis
	vec3 v;
	v.x = dot (lightDir, t);
	v.y = dot (lightDir, b);
	v.z = dot (lightDir, n);
	lightVec = normalize (v);
	
	v.x = dot (vertexPosition, t);
	v.y = dot (vertexPosition, b);
	v.z = dot (vertexPosition, n);
	eyeVec = normalize (v);
	
	vertexPosition = normalize(vertexPosition);
	
	/* Normalize the halfVector to pass it to the fragment shader */

	// No need to divide by two, the result is normalized anyway.
	// vec3 halfVector = normalize((vertexPosition + lightDir) / 2.0); 
	vec3 halfVector = normalize(vertexPosition + lightDir);
	v.x = dot (halfVector, t);
	v.y = dot (halfVector, b);
	v.z = dot (halfVector, n);
	// No need to normalize, t,b,n and halfVector are normal vectors.
	//normalize (v);
	halfVec = v ; 
	  
	  
	gl_Position = ftransform();
}

uniform sampler2D color_texture;
uniform sampler2D normal_texture;

// New bumpmapping
varying vec3 lightVec;
varying vec3 halfVec;
varying vec3 eyeVec;

void main (void)
{
	// lookup normal from normal map, move from [0,1] to  [-1, 1] range, normalize
	//vec3 normal = texture2D (normal_texture, gl_TexCoord[0].st).rgb;
	vec3 normal = (2.0 * texture2D (normal_texture, gl_TexCoord[0].st).rgb) - 1.0;
	normal = normalize (normal);
    //normal.z = - normal.z;
	
    lightVec = normalize(lightVec);
	// compute diffuse lighting
	float lamberFactor= max (dot (lightVec, normal), 0.0) ;
	vec4 diffuseMaterial = 0.0;
	vec4 diffuseLight  = 0.0;
	
	// compute specular lighting
	vec4 specularMaterial ;
	vec4 specularLight ;
	float shininess ;
  
	// compute ambient
	vec4 ambientLight = gl_LightSource[0].ambient;	
	
	//gl_FragColor = vec4(1.0);
	
    gl_FragColor = ambientLight;
    //gl_FragColor.rgb = 0.5 * (normal - vec3(1.0));//ambientLight;
    //gl_FragColor.rgb = (0.5 * normal) + 0.5;
    
	if (lamberFactor > 0.0)
	{
		diffuseMaterial = texture2D (color_texture, gl_TexCoord[0].st);
		diffuseLight  = gl_LightSource[0].diffuse;
		
		// In doom3, specular value comes from a texture 
		specularMaterial =  vec4(1.0)  ;
		specularLight = gl_LightSource[0].specular;
		shininess = pow (max (dot (halfVec, normal), 0.0), 2.0)  ;
		gl_FragColor +=	diffuseMaterial * diffuseLight * lamberFactor ;
		//gl_FragColor +=	specularMaterial * specularLight * shininess ;				
	}
}

